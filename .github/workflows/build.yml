name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 设置超时时间

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt update
        # Install main dependencies
        sudo apt install -y \
          git zip unzip openjdk-11-jdk python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev \
          cmake libffi-dev libssl-dev

        # Handle libtinfo5 compatibility for Ubuntu 24.04
        if ! sudo apt install -y libtinfo5 2>/dev/null; then
          echo "libtinfo5 not available, installing libtinfo6 and creating symlink"
          sudo apt install -y libtinfo6
          # Create compatibility symlink for libtinfo5
          sudo ln -sf /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5 || true
        fi

        # Install additional dependencies that might be needed
        sudo apt install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          python3-dev \
          python3-setuptools

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: 30.0.3
        ndk-version: 25.2.9519653

    - name: Accept Android SDK licenses
      run: |
        # Create Android SDK directories if they don't exist
        mkdir -p $ANDROID_SDK_ROOT/licenses

        # Accept all Android SDK licenses automatically
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/android-googletv-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-arm-dbt-license
        echo "79120722343a6f314e0719f863036c702b0e6b2a" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license-old
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > $ANDROID_SDK_ROOT/licenses/android-sdk-license-bcbbd656
        echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > $ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license

        # Alternative method: Use sdkmanager to accept licenses
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Verify licenses are accepted
        echo "Checking accepted licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses directory found"

    - name: Install additional Android SDK components
      run: |
        # Update SDK manager and install required components
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --update

        # Install specific build-tools versions that might be needed
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"

        # Install platform tools and other essentials
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"

        # Verify installations
        echo "Installed build-tools:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools directory found"
        echo "Installed platforms:"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "No platforms directory found"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies with specific versions for better compatibility
        pip install --upgrade setuptools wheel
        pip install buildozer cython==0.29.36 kivy[base]==2.1.0

        # Verify installations
        python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
        buildozer --version

    - name: Setup Buildozer environment
      run: |
        # Ensure correct permissions and directories for GitHub Actions
        sudo chown -R runner:runner /home/runner || true
        mkdir -p /home/runner/.buildozer
        chmod -R 755 /home/runner/.buildozer

        # Show directory structure for debugging
        echo "Home directory contents:"
        ls -la /home/runner/
        echo "Buildozer directory:"
        ls -la /home/runner/.buildozer/ || echo "Buildozer directory doesn't exist yet"

    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: /home/runner/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Build APK with Buildozer
      run: |
        # Set up environment variables for GitHub Actions
        export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export ANDROID_HOME=$ANDROID_HOME
        export ANDROID_NDK_HOME=$ANDROID_NDK_HOME
        export PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin

        # Ensure buildozer uses the correct home directory
        export HOME=/home/runner
        export BUILDOZER_HOME=/home/runner/.buildozer

        # Create buildozer directory if it doesn't exist
        mkdir -p /home/runner/.buildozer

        # Show environment info for debugging
        echo "Current user: $(whoami)"
        echo "Home directory: $HOME"
        echo "Working directory: $(pwd)"
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Android Home: $ANDROID_HOME"
        echo "Android NDK Home: $ANDROID_NDK_HOME"
        echo "Java Home: $JAVA_HOME"
        echo "Buildozer Home: $BUILDOZER_HOME"
        echo "PATH: $PATH"

        # Verify Android SDK components
        echo "=== Android SDK Verification ==="
        echo "SDK Root contents:"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK Root not found"
        echo "Build-tools available:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools found"
        echo "Platform-tools:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "No platform-tools found"
        echo "Licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses found"

        # Check for aidl tool specifically
        echo "=== AIDL Tool Check ==="
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL tool not found"

        # Verify buildozer.spec exists and show NDK path setting
        if [ -f buildozer.spec ]; then
          echo "buildozer.spec found"
          grep -n "android.ndk_path" buildozer.spec || echo "android.ndk_path not set (will auto-download)"
        else
          echo "buildozer.spec not found, initializing..."
          buildozer init
        fi

        # Clean any previous builds to avoid path conflicts
        buildozer android clean || true

        # Final license check before building
        echo "=== Final License Check ==="
        yes | sdkmanager --licenses || echo "License acceptance completed"

        # Build the APK
        echo "=== Starting APK Build ==="
        buildozer android debug
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        HOME: /home/runner
        BUILDOZER_HOME: /home/runner/.buildozer

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: pushup-counter-debug-apk
        path: bin/*.apk
        retention-days: 30

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: .buildozer/android/platform/build-*/
        retention-days: 7
