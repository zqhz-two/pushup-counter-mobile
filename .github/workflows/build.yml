name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 设置超时时间

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt update
        # Install main dependencies
        sudo apt install -y \
          git zip unzip openjdk-11-jdk python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev \
          cmake libffi-dev libssl-dev

        # Handle libtinfo5 compatibility for Ubuntu 24.04
        if ! sudo apt install -y libtinfo5 2>/dev/null; then
          echo "libtinfo5 not available, installing libtinfo6 and creating symlink"
          sudo apt install -y libtinfo6
          # Create compatibility symlink for libtinfo5
          sudo ln -sf /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5 || true
        fi

        # Install additional dependencies that might be needed
        sudo apt install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          python3-dev \
          python3-setuptools

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        accept-android-sdk-licenses: true
        packages: |
          platforms;android-30
          platforms;android-33
          build-tools;30.0.3
          build-tools;33.0.2
          build-tools;34.0.0
          platform-tools
          ndk;25.2.9519653

    - name: Configure NDK r25b
      run: |
        echo "=== NDK r25b Configuration ==="

        # First, try to use the NDK installed by android-actions/setup-android
        if [ -d "$ANDROID_SDK_ROOT/ndk" ]; then
          echo "Available NDK versions in SDK:"
          ls -la $ANDROID_SDK_ROOT/ndk/

          # Look for NDK 25.x
          NDK_25_PATH=$(find $ANDROID_SDK_ROOT/ndk -maxdepth 1 -name "25.*" -type d | head -1)

          if [ -n "$NDK_25_PATH" ] && [ -d "$NDK_25_PATH" ]; then
            echo "Found NDK 25 installed by setup-android at: $NDK_25_PATH"
          else
            echo "NDK 25 not found in SDK, will download manually..."
            NDK_25_PATH=""
          fi
        fi

        # If NDK 25 not found, download it manually
        if [ -z "$NDK_25_PATH" ] || [ ! -d "$NDK_25_PATH" ]; then
          echo "Downloading NDK r25b manually..."
          mkdir -p /home/runner/.buildozer/android/platform

          NDK_25B_URL="https://dl.google.com/android/repository/android-ndk-r25b-linux.zip"
          NDK_25_PATH="/home/runner/.buildozer/android/platform/android-ndk-r25b"

          if [ ! -d "$NDK_25_PATH" ]; then
            cd /home/runner/.buildozer/android/platform
            wget -q "$NDK_25B_URL" -O android-ndk-r25b.zip
            echo "Extracting NDK r25b..."
            unzip -q android-ndk-r25b.zip
            rm android-ndk-r25b.zip
            echo "NDK r25b downloaded and extracted successfully"
          fi
        fi

        # Verify NDK r25b installation
        if [ -f "$NDK_25_PATH/source.properties" ]; then
          echo "NDK r25b version info:"
          cat "$NDK_25_PATH/source.properties"
        else
          echo "ERROR: NDK r25b source.properties not found at $NDK_25_PATH!"
          exit 1
        fi

        # Set environment variables
        echo "NDK_25_PATH=$NDK_25_PATH" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$NDK_25_PATH" >> $GITHUB_ENV
        echo "ANDROIDNDK=$NDK_25_PATH" >> $GITHUB_ENV

        echo "NDK r25b configured at: $NDK_25_PATH"

    - name: Accept Android SDK licenses
      run: |
        # Create Android SDK directories if they don't exist
        mkdir -p $ANDROID_SDK_ROOT/licenses

        # Accept all Android SDK licenses automatically
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/android-googletv-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-arm-dbt-license
        echo "79120722343a6f314e0719f863036c702b0e6b2a" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license-old
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > $ANDROID_SDK_ROOT/licenses/android-sdk-license-bcbbd656
        echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > $ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license

        # Alternative method: Use sdkmanager to accept licenses
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Verify licenses are accepted
        echo "Checking accepted licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses directory found"

    - name: Install additional Android SDK components
      run: |
        # Update SDK manager and install required components
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --update

        # Install specific build-tools versions that might be needed
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"

        # Install platform tools and other essentials
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"

        # Verify installations
        echo "Installed build-tools:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools directory found"
        echo "Installed platforms:"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "No platforms directory found"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies with specific versions for better compatibility
        pip install --upgrade setuptools wheel
        pip install buildozer cython==0.29.36 kivy[base]==2.1.0

        # Verify installations
        python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
        buildozer --version

    - name: Setup Buildozer environment
      run: |
        # Ensure correct permissions and directories for GitHub Actions
        sudo chown -R runner:runner /home/runner || true
        mkdir -p /home/runner/.buildozer
        chmod -R 755 /home/runner/.buildozer

        # Note: NDK r25b is now directly downloaded and configured in previous step
        echo "=== Buildozer Environment Setup ==="
        echo "NDK r25b should already be available at the configured path"

        # Show directory structure for debugging
        echo "Home directory contents:"
        ls -la /home/runner/
        echo "Buildozer directory:"
        ls -la /home/runner/.buildozer/ || echo "Buildozer directory doesn't exist yet"

    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: /home/runner/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Build APK with Buildozer
      run: |
        # Set up environment variables for GitHub Actions
        export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export ANDROID_HOME=$ANDROID_HOME

        # Override ALL NDK-related environment variables to use our NDK r25b
        export ANDROID_NDK_HOME=$NDK_25_PATH
        export ANDROID_NDK_ROOT=$NDK_25_PATH
        export ANDROID_NDK=$NDK_25_PATH
        export ANDROIDNDK=$NDK_25_PATH
        export NDK_ROOT=$NDK_25_PATH

        export PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin

        # Ensure buildozer uses the correct home directory
        export HOME=/home/runner
        export BUILDOZER_HOME=/home/runner/.buildozer

        # Create buildozer directory if it doesn't exist
        mkdir -p /home/runner/.buildozer

        # Verify NDK r25b is available
        if [ ! -d "$NDK_25_PATH" ]; then
          echo "ERROR: NDK r25b not found at $NDK_25_PATH"
          exit 1
        fi
        echo "NDK r25b confirmed at: $NDK_25_PATH"

        # Show environment info for debugging
        echo "=== Environment Information ==="
        echo "Current user: $(whoami)"
        echo "Home directory: $HOME"
        echo "Working directory: $(pwd)"
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Android Home: $ANDROID_HOME"
        echo "Android NDK Home: $ANDROID_NDK_HOME"
        echo "Android NDK Root: $ANDROID_NDK_ROOT"
        echo "Android NDK: $ANDROID_NDK"
        echo "ANDROIDNDK: $ANDROIDNDK"
        echo "NDK_ROOT: $NDK_ROOT"
        echo "NDK_25_PATH: $NDK_25_PATH"
        echo "Java Home: $JAVA_HOME"
        echo "Buildozer Home: $BUILDOZER_HOME"
        echo "PATH: $PATH"

        # Comprehensive NDK verification
        echo "=== Comprehensive NDK Verification ==="
        echo "ANDROIDNDK: $ANDROIDNDK"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "NDK_25_PATH: $NDK_25_PATH"

        if [ -f "$ANDROIDNDK/source.properties" ]; then
          echo "NDK source.properties content:"
          cat "$ANDROIDNDK/source.properties"

          # Extract and verify NDK version
          NDK_VERSION=$(grep "Pkg.Revision" "$ANDROIDNDK/source.properties" | cut -d'=' -f2 | tr -d ' ')
          echo "Detected NDK version: $NDK_VERSION"

          if [[ "$NDK_VERSION" == 25.* ]]; then
            echo "✅ NDK version is correct (25.x)"
          else
            echo "❌ WARNING: NDK version is not 25.x, this may cause issues"
          fi
        else
          echo "❌ ERROR: NDK source.properties not found at $ANDROIDNDK"
          exit 1
        fi

        echo "Buildozer platform directory contents:"
        ls -la /home/runner/.buildozer/android/platform/ || echo "Platform directory not found"

        # Verify Android SDK components
        echo "=== Android SDK Verification ==="
        echo "SDK Root contents:"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK Root not found"
        echo "Build-tools available:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools found"
        echo "Platform-tools:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "No platform-tools found"
        echo "Licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses found"

        # Check for aidl tool specifically
        echo "=== AIDL Tool Check ==="
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL tool not found"

        # Verify buildozer.spec exists and show NDK path setting
        if [ -f buildozer.spec ]; then
          echo "buildozer.spec found"
          grep -n "android.ndk_path" buildozer.spec || echo "android.ndk_path not set (will auto-download)"
        else
          echo "buildozer.spec not found, initializing..."
          buildozer init
        fi

        # Clean any previous builds to avoid path conflicts
        buildozer android clean || true

        # Final license check before building
        echo "=== Final License Check ==="
        yes | sdkmanager --licenses || echo "License acceptance completed"

        # Build the APK with enhanced error handling
        echo "=== Starting APK Build ==="
        echo "Buildozer command will be executed with the following environment:"
        echo "  ANDROIDNDK: $ANDROIDNDK"
        echo "  ANDROID_NDK: $ANDROID_NDK"
        echo "  ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "  ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "  NDK_ROOT: $NDK_ROOT"
        echo "  ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "  ANDROID_HOME: $ANDROID_HOME"

        # Unset conflicting system NDK variables before running buildozer
        unset ANDROID_NDK_LATEST_HOME || true

        # Run buildozer with error capture and output logging
        set +e  # Don't exit on error immediately
        echo "Executing: buildozer android debug"
        buildozer android debug 2>&1 | tee /tmp/buildozer_output.log
        BUILD_EXIT_CODE=$?
        set -e  # Re-enable exit on error

        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Buildozer failed with exit code: $BUILD_EXIT_CODE"
          echo "=== Buildozer Error Analysis ==="

          # Show the last part of buildozer output for immediate context
          echo "=== Last 30 lines of buildozer output ==="
          tail -30 /tmp/buildozer_output.log 2>/dev/null || echo "No buildozer output log found"

          # Check for python-for-android logs
          echo "=== Python-for-android logs ==="
          P4A_LOG_DIR=".buildozer/android/platform/python-for-android"
          if [ -d "$P4A_LOG_DIR" ]; then
            echo "Available log files:"
            find "$P4A_LOG_DIR" -name "*.log" -type f | head -10

            # Check the main build log
            if [ -f "$P4A_LOG_DIR/dist/pushup_counter/build.log" ]; then
              echo "Python-for-android build log (last 100 lines):"
              tail -100 "$P4A_LOG_DIR/dist/pushup_counter/build.log"
            fi

            # Check for any error logs
            find "$P4A_LOG_DIR" -name "*error*.log" -type f | head -3 | while read errorlog; do
              echo "Error log: $errorlog"
              cat "$errorlog"
            done
          fi

          # Check for NDK-related errors with more context
          echo "=== NDK Environment Check ==="
          echo "All NDK-related environment variables:"
          env | grep -i ndk | sort

          echo "=== NDK-related errors in logs ==="
          find .buildozer -name "*.log" -type f -exec grep -l "ndk\|NDK" {} \; | head -5 | while read logfile; do
            echo "=== NDK references in $logfile ==="
            grep -n -C 3 "ndk\|NDK" "$logfile" | tail -20
          done

          # Check for specific error patterns
          echo "=== Common Error Patterns ==="
          find .buildozer -name "*.log" -type f -exec grep -l "error\|Error\|ERROR\|failed\|Failed\|FAILED" {} \; | head -3 | while read errorlog; do
            echo "Errors in $errorlog:"
            grep -n -i "error\|failed" "$errorlog" | tail -10
          done

          exit $BUILD_EXIT_CODE
        else
          echo "✅ Buildozer completed successfully!"

          # Find and verify APK files
          echo "=== APK File Detection ==="
          echo "Searching for generated APK files..."

          # Check common APK locations
          APK_LOCATIONS=(
            "bin/*.apk"
            ".buildozer/android/platform/build-*/bin/*.apk"
            ".buildozer/android/platform/build-*/dist/*.apk"
            "dist/*.apk"
          )

          APK_FOUND=false
          for location in "${APK_LOCATIONS[@]}"; do
            if ls $location 1> /dev/null 2>&1; then
              echo "✅ Found APK files at: $location"
              ls -la $location
              APK_FOUND=true
            else
              echo "❌ No APK files found at: $location"
            fi
          done

          if [ "$APK_FOUND" = false ]; then
            echo "⚠️ Warning: No APK files found in expected locations"
            echo "Searching entire build directory for APK files..."
            find .buildozer -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
          fi
        fi
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_HOME: ${{ env.NDK_25_PATH }}
        ANDROID_NDK_ROOT: ${{ env.NDK_25_PATH }}
        ANDROID_NDK: ${{ env.NDK_25_PATH }}
        ANDROIDNDK: ${{ env.NDK_25_PATH }}
        NDK_ROOT: ${{ env.NDK_25_PATH }}
        NDK_25_PATH: ${{ env.NDK_25_PATH }}
        HOME: /home/runner
        BUILDOZER_HOME: /home/runner/.buildozer

    - name: Collect APK artifacts
      if: success()
      run: |
        # Create a directory for APK collection
        mkdir -p apk_output

        # Find and copy all APK files to the collection directory
        echo "Collecting APK files..."
        APK_COUNT=0

        # Search in multiple possible locations
        for apk_file in $(find . -name "*.apk" -type f 2>/dev/null); do
          if [ -f "$apk_file" ]; then
            echo "Found APK: $apk_file"
            cp "$apk_file" "apk_output/"
            APK_COUNT=$((APK_COUNT + 1))
          fi
        done

        if [ $APK_COUNT -eq 0 ]; then
          echo "❌ No APK files found to upload"
          echo "This indicates the build process may have failed"
          # Create a placeholder file to indicate no APK was generated
          echo "No APK files were generated during this build" > apk_output/NO_APK_GENERATED.txt
          echo "APK_FOUND=false" >> $GITHUB_ENV
        else
          echo "✅ Collected $APK_COUNT APK file(s)"
          ls -la apk_output/
          echo "APK_FOUND=true" >> $GITHUB_ENV
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: pushup-counter-debug-apk
        path: apk_output/
        retention-days: 30
        if-no-files-found: warn

    - name: Collect build logs and diagnostics
      if: always()  # Run even if build succeeds, for debugging
      run: |
        # Create logs directory
        mkdir -p build_logs

        # Collect buildozer output
        if [ -f "/tmp/buildozer_output.log" ]; then
          cp "/tmp/buildozer_output.log" build_logs/
        fi

        # Collect python-for-android logs
        if [ -d ".buildozer/android/platform/python-for-android" ]; then
          find .buildozer/android/platform/python-for-android -name "*.log" -type f | while read logfile; do
            # Create relative path for log file
            rel_path=$(echo "$logfile" | sed 's|.buildozer/android/platform/python-for-android/||')
            mkdir -p "build_logs/p4a/$(dirname "$rel_path")"
            cp "$logfile" "build_logs/p4a/$rel_path"
          done
        fi

        # Collect buildozer logs
        if [ -d ".buildozer" ]; then
          find .buildozer -name "*.log" -type f | head -20 | while read logfile; do
            rel_path=$(echo "$logfile" | sed 's|.buildozer/||')
            mkdir -p "build_logs/buildozer/$(dirname "$rel_path")"
            cp "$logfile" "build_logs/buildozer/$rel_path"
          done
        fi

        # Create a summary file
        echo "Build Summary - $(date)" > build_logs/build_summary.txt
        echo "================================" >> build_logs/build_summary.txt
        echo "Build Status: ${{ job.status }}" >> build_logs/build_summary.txt
        echo "Commit: ${{ github.sha }}" >> build_logs/build_summary.txt
        echo "Branch: ${{ github.ref_name }}" >> build_logs/build_summary.txt
        echo "" >> build_logs/build_summary.txt

        # Add environment info
        echo "NDK Environment Variables:" >> build_logs/build_summary.txt
        env | grep -i ndk | sort >> build_logs/build_summary.txt

        echo "Collected logs:"
        find build_logs -type f | sort

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-and-diagnostics
        path: build_logs/
        retention-days: 7
