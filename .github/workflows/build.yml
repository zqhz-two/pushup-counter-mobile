name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 设置超时时间

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt update
        # Install main dependencies
        sudo apt install -y \
          git zip unzip openjdk-11-jdk python3-pip \
          autoconf automake libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev \
          cmake libffi-dev libssl-dev

        # Install additional autotools and build dependencies
        sudo apt install -y \
          autotools-dev \
          libtool-bin \
          autopoint \
          gettext \
          m4 \
          texinfo \
          libtool \
          automake \
          autoconf

        # Handle libtinfo5 compatibility for Ubuntu 24.04
        if ! sudo apt install -y libtinfo5 2>/dev/null; then
          echo "libtinfo5 not available, installing libtinfo6 and creating symlink"
          sudo apt install -y libtinfo6
          # Create compatibility symlink for libtinfo5
          sudo ln -sf /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5 || true
        fi

        # Install additional dependencies that might be needed
        sudo apt install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          libssl3 \
          openssl \
          pkg-config \
          python3-dev \
          python3-setuptools \
          python3-venv

        # Verify autotools installation
        echo "=== Autotools Verification ==="
        autoconf --version | head -1
        automake --version | head -1
        libtool --version | head -1
        echo "Available libtool macros:"
        find /usr/share/aclocal -name "*libtool*" | head -5

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        accept-android-sdk-licenses: true

    - name: Install Android SDK packages
      run: |
        echo "Installing Android SDK packages..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --update

        # Install packages one by one for better error handling
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653"

        echo "Installed packages:"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed

    - name: Configure NDK r25b
      run: |
        echo "=== NDK r25b Configuration ==="

        # First, try to use the NDK installed by android-actions/setup-android
        if [ -d "$ANDROID_SDK_ROOT/ndk" ]; then
          echo "Available NDK versions in SDK:"
          ls -la $ANDROID_SDK_ROOT/ndk/

          # Look for NDK 25.x
          NDK_25_PATH=$(find $ANDROID_SDK_ROOT/ndk -maxdepth 1 -name "25.*" -type d | head -1)

          if [ -n "$NDK_25_PATH" ] && [ -d "$NDK_25_PATH" ]; then
            echo "Found NDK 25 installed by setup-android at: $NDK_25_PATH"
          else
            echo "NDK 25 not found in SDK, will download manually..."
            NDK_25_PATH=""
          fi
        fi

        # If NDK 25 not found, download it manually
        if [ -z "$NDK_25_PATH" ] || [ ! -d "$NDK_25_PATH" ]; then
          echo "Downloading NDK r25b manually..."
          mkdir -p /home/runner/.buildozer/android/platform

          NDK_25B_URL="https://dl.google.com/android/repository/android-ndk-r25b-linux.zip"
          NDK_25_PATH="/home/runner/.buildozer/android/platform/android-ndk-r25b"

          if [ ! -d "$NDK_25_PATH" ]; then
            cd /home/runner/.buildozer/android/platform
            wget -q "$NDK_25B_URL" -O android-ndk-r25b.zip
            echo "Extracting NDK r25b..."
            unzip -q android-ndk-r25b.zip
            rm android-ndk-r25b.zip
            echo "NDK r25b downloaded and extracted successfully"
          fi
        fi

        # Verify NDK r25b installation
        if [ -f "$NDK_25_PATH/source.properties" ]; then
          echo "NDK r25b version info:"
          cat "$NDK_25_PATH/source.properties"
        else
          echo "ERROR: NDK r25b source.properties not found at $NDK_25_PATH!"
          exit 1
        fi

        # Set environment variables
        echo "NDK_25_PATH=$NDK_25_PATH" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$NDK_25_PATH" >> $GITHUB_ENV
        echo "ANDROIDNDK=$NDK_25_PATH" >> $GITHUB_ENV

        echo "NDK r25b configured at: $NDK_25_PATH"

    - name: Accept Android SDK licenses
      run: |
        # Create Android SDK directories if they don't exist
        mkdir -p $ANDROID_SDK_ROOT/licenses

        # Accept all Android SDK licenses automatically
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/android-googletv-license
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-arm-dbt-license
        echo "79120722343a6f314e0719f863036c702b0e6b2a" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license-old
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > $ANDROID_SDK_ROOT/licenses/android-sdk-license-bcbbd656
        echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > $ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license

        # Alternative method: Use sdkmanager to accept licenses
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Verify licenses are accepted
        echo "Checking accepted licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses directory found"

    - name: Verify Android SDK installation
      run: |
        echo "=== Android SDK Verification ==="
        echo "SDK Root: $ANDROID_SDK_ROOT"

        # Verify installations
        echo "Installed build-tools:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools directory found"
        echo "Installed platforms:"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "No platforms directory found"
        echo "NDK installations:"
        ls -la $ANDROID_SDK_ROOT/ndk/ || echo "No NDK directory found"

    - name: Configure autotools environment
      run: |
        # Ensure autotools can find all necessary macros
        echo "=== Comprehensive Autotools Environment Setup ==="

        # Update autotools macro search path
        export ACLOCAL_PATH="/usr/share/aclocal:/usr/local/share/aclocal:${ACLOCAL_PATH}"
        echo "ACLOCAL_PATH=$ACLOCAL_PATH" >> $GITHUB_ENV

        # Force regenerate aclocal cache
        sudo aclocal --force --install || true
        sudo autoreconf --install --force || true

        # Always install complete autotools from source to ensure macro compatibility
        echo "Installing complete autotools suite from source..."

        # Install libtool 2.4.7 from source
        cd /tmp
        wget -q https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.gz
        tar -xzf libtool-2.4.7.tar.gz
        cd libtool-2.4.7
        ./configure --prefix=/usr/local
        make -j$(nproc)
        sudo make install

        # Install automake 1.16.5 from source
        cd /tmp
        wget -q https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz
        tar -xzf automake-1.16.5.tar.gz
        cd automake-1.16.5
        ./configure --prefix=/usr/local
        make -j$(nproc)
        sudo make install

        # Install autoconf 2.71 from source
        cd /tmp
        wget -q https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz
        tar -xzf autoconf-2.71.tar.gz
        cd autoconf-2.71
        ./configure --prefix=/usr/local
        make -j$(nproc)
        sudo make install

        # Update environment to prioritize our installations
        export PATH="/usr/local/bin:$PATH"
        export ACLOCAL_PATH="/usr/local/share/aclocal:/usr/share/aclocal"
        echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
        echo "ACLOCAL_PATH=/usr/local/share/aclocal:/usr/share/aclocal" >> $GITHUB_ENV

        cd /home/runner/work/pushup-counter-mobile/pushup-counter-mobile

        # Verify libtool macros are available
        echo "=== Libtool Macro Verification ==="
        echo "Checking for LT_SYS_SYMBOL_USCORE macro:"
        grep -r "LT_SYS_SYMBOL_USCORE" /usr/share/aclocal/ /usr/local/share/aclocal/ 2>/dev/null || echo "Macro still not found"

        # List available libtool-related macros
        echo "Available libtool macro files:"
        find /usr/share/aclocal /usr/local/share/aclocal -name "*libtool*" 2>/dev/null || echo "No libtool macro files found"

        # Show aclocal search path
        echo "Aclocal search path: $ACLOCAL_PATH"

    - name: Configure OpenSSL and pkg-config
      run: |
        echo "=== OpenSSL and pkg-config Configuration ==="

        # Verify OpenSSL installation
        openssl version

        # Find OpenSSL pkg-config files
        echo "OpenSSL pkg-config files:"
        find /usr -name "openssl.pc" 2>/dev/null || echo "openssl.pc not found"
        find /usr -name "libssl.pc" 2>/dev/null || echo "libssl.pc not found"
        find /usr -name "libcrypto.pc" 2>/dev/null || echo "libcrypto.pc not found"

        # Set up pkg-config path for OpenSSL
        export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH}"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        # Test pkg-config for OpenSSL
        echo "Testing pkg-config for OpenSSL:"
        pkg-config --exists openssl && echo "✅ openssl found" || echo "❌ openssl not found"
        pkg-config --exists libssl && echo "✅ libssl found" || echo "❌ libssl not found"
        pkg-config --exists libcrypto && echo "✅ libcrypto found" || echo "❌ libcrypto not found"

        # Show OpenSSL configuration
        if pkg-config --exists openssl; then
          echo "OpenSSL version: $(pkg-config --modversion openssl)"
          echo "OpenSSL cflags: $(pkg-config --cflags openssl)"
          echo "OpenSSL libs: $(pkg-config --libs openssl)"
        fi

        # Create OpenSSL pkg-config file if missing
        if ! pkg-config --exists openssl; then
          echo "Creating OpenSSL pkg-config file..."
          sudo mkdir -p /usr/lib/pkgconfig

          # Create openssl.pc file
          echo "prefix=/usr" | sudo tee /usr/lib/pkgconfig/openssl.pc
          echo "exec_prefix=\${prefix}" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "libdir=\${exec_prefix}/lib/x86_64-linux-gnu" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "includedir=\${prefix}/include" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "Name: OpenSSL" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "Description: Secure Sockets Layer and cryptography libraries and tools" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "Version: $(openssl version | cut -d' ' -f2)" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
          echo "Requires: libssl libcrypto" | sudo tee -a /usr/lib/pkgconfig/openssl.pc
        fi

        # Verify OpenSSL library files exist
        echo "=== OpenSSL Library Verification ==="
        echo "Checking OpenSSL library files:"
        ls -la /usr/lib/x86_64-linux-gnu/libssl* || echo "libssl not found"
        ls -la /usr/lib/x86_64-linux-gnu/libcrypto* || echo "libcrypto not found"
        ls -la /usr/include/openssl/ | head -5 || echo "OpenSSL headers not found"

        # Test OpenSSL functionality
        echo "Testing OpenSSL functionality:"
        openssl version -a

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies with specific versions for better compatibility
        pip install --upgrade setuptools wheel
        pip install buildozer cython==0.29.36 kivy[base]==2.1.0

        # Verify installations
        python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
        buildozer --version

    - name: Setup Buildozer environment
      run: |
        # Ensure correct permissions and directories for GitHub Actions
        sudo chown -R runner:runner /home/runner || true
        mkdir -p /home/runner/.buildozer
        chmod -R 755 /home/runner/.buildozer

        # Note: NDK r25b is now directly downloaded and configured in previous step
        echo "=== Buildozer Environment Setup ==="
        echo "NDK r25b should already be available at the configured path"

        # Show directory structure for debugging
        echo "Home directory contents:"
        ls -la /home/runner/
        echo "Buildozer directory:"
        ls -la /home/runner/.buildozer/ || echo "Buildozer directory doesn't exist yet"

    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: /home/runner/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Build APK with Buildozer
      run: |
        # Set up environment variables for GitHub Actions
        export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export ANDROID_HOME=$ANDROID_HOME

        # Override ALL NDK-related environment variables to use our NDK r25b
        export ANDROID_NDK_HOME=$NDK_25_PATH
        export ANDROID_NDK_ROOT=$NDK_25_PATH
        export ANDROID_NDK=$NDK_25_PATH
        export ANDROIDNDK=$NDK_25_PATH
        export NDK_ROOT=$NDK_25_PATH

        # Ensure autotools environment is properly set
        export ACLOCAL_PATH="/usr/local/share/aclocal:/usr/share/aclocal:${ACLOCAL_PATH}"
        export LIBTOOL="/usr/local/bin/libtool"
        export LIBTOOLIZE="/usr/local/bin/libtoolize"

        # Ensure pkg-config can find OpenSSL
        export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH}"

        # Set OpenSSL environment variables for python-for-android
        export OPENSSL_VERSION="$(openssl version | cut -d' ' -f2)"
        export OPENSSL_ROOT_DIR="/usr"
        export OPENSSL_INCLUDE_DIR="/usr/include/openssl"
        export OPENSSL_CRYPTO_LIBRARY="/usr/lib/x86_64-linux-gnu/libcrypto.so"
        export OPENSSL_SSL_LIBRARY="/usr/lib/x86_64-linux-gnu/libssl.so"
        export OPENSSL_LIBRARIES="/usr/lib/x86_64-linux-gnu"

        # Additional SSL/TLS environment variables
        export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
        export SSL_CERT_DIR="/etc/ssl/certs"

        export PATH=/usr/local/bin:$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin

        # Ensure buildozer uses the correct home directory
        export HOME=/home/runner
        export BUILDOZER_HOME=/home/runner/.buildozer

        # Create buildozer directory if it doesn't exist
        mkdir -p /home/runner/.buildozer

        # Verify NDK r25b is available
        if [ ! -d "$NDK_25_PATH" ]; then
          echo "ERROR: NDK r25b not found at $NDK_25_PATH"
          exit 1
        fi
        echo "NDK r25b confirmed at: $NDK_25_PATH"

        # Show environment info for debugging
        echo "=== Environment Information ==="
        echo "Current user: $(whoami)"
        echo "Home directory: $HOME"
        echo "Working directory: $(pwd)"
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Android Home: $ANDROID_HOME"
        echo "Android NDK Home: $ANDROID_NDK_HOME"
        echo "Android NDK Root: $ANDROID_NDK_ROOT"
        echo "Android NDK: $ANDROID_NDK"
        echo "ANDROIDNDK: $ANDROIDNDK"
        echo "NDK_ROOT: $NDK_ROOT"
        echo "NDK_25_PATH: $NDK_25_PATH"
        echo "Java Home: $JAVA_HOME"
        echo "Buildozer Home: $BUILDOZER_HOME"
        echo "PATH: $PATH"

        # Comprehensive NDK verification
        echo "=== Comprehensive NDK Verification ==="
        echo "ANDROIDNDK: $ANDROIDNDK"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "NDK_25_PATH: $NDK_25_PATH"

        if [ -f "$ANDROIDNDK/source.properties" ]; then
          echo "NDK source.properties content:"
          cat "$ANDROIDNDK/source.properties"

          # Extract and verify NDK version
          NDK_VERSION=$(grep "Pkg.Revision" "$ANDROIDNDK/source.properties" | cut -d'=' -f2 | tr -d ' ')
          echo "Detected NDK version: $NDK_VERSION"

          if [[ "$NDK_VERSION" == 25.* ]]; then
            echo "✅ NDK version is correct (25.x)"
          else
            echo "❌ WARNING: NDK version is not 25.x, this may cause issues"
          fi
        else
          echo "❌ ERROR: NDK source.properties not found at $ANDROIDNDK"
          exit 1
        fi

        echo "Buildozer platform directory contents:"
        ls -la /home/runner/.buildozer/android/platform/ || echo "Platform directory not found"

        # Verify Android SDK components
        echo "=== Android SDK Verification ==="
        echo "SDK Root contents:"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK Root not found"
        echo "Build-tools available:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "No build-tools found"
        echo "Platform-tools:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "No platform-tools found"
        echo "Licenses:"
        ls -la $ANDROID_SDK_ROOT/licenses/ || echo "No licenses found"

        # Check for aidl tool specifically
        echo "=== AIDL Tool Check ==="
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "AIDL tool not found"

        # Verify and analyze buildozer.spec configuration
        if [ -f buildozer.spec ]; then
          echo "✅ buildozer.spec found"
          echo "=== Buildozer Configuration Analysis ==="

          # Show key configuration values
          echo "App title: $(grep '^title' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Package name: $(grep '^package.name' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Package domain: $(grep '^package.domain' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Source directory: $(grep '^source.dir' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Main source file: $(grep '^source.include_exts' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Requirements: $(grep '^requirements' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Android API: $(grep '^android.api' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"
          echo "Android NDK: $(grep '^android.ndk' buildozer.spec | cut -d'=' -f2 | tr -d ' ')"

          # Check if main.py exists
          MAIN_PY=$(grep '^source.dir' buildozer.spec | cut -d'=' -f2 | tr -d ' ')
          if [ -z "$MAIN_PY" ]; then
            MAIN_PY="."
          fi

          if [ -f "$MAIN_PY/main.py" ]; then
            echo "✅ Main source file found: $MAIN_PY/main.py"
            echo "Main.py size: $(ls -lh "$MAIN_PY/main.py" | awk '{print $5}')"
          else
            echo "❌ WARNING: Main source file not found at $MAIN_PY/main.py"
            echo "Available Python files:"
            find "$MAIN_PY" -name "*.py" -type f | head -5
          fi

        else
          echo "❌ buildozer.spec not found, initializing..."
          buildozer init
        fi

        # Clean any previous builds to avoid path conflicts
        buildozer android clean || true

        # Final license check before building
        echo "=== Final License Check ==="
        yes | sdkmanager --licenses || echo "License acceptance completed"

        # Build the APK with enhanced error handling
        echo "=== Starting APK Build ==="
        echo "Buildozer command will be executed with the following environment:"
        echo "  ANDROIDNDK: $ANDROIDNDK"
        echo "  ANDROID_NDK: $ANDROID_NDK"
        echo "  ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "  ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "  NDK_ROOT: $NDK_ROOT"
        echo "  ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "  ANDROID_HOME: $ANDROID_HOME"

        # Unset conflicting system NDK variables before running buildozer
        unset ANDROID_NDK_LATEST_HOME || true

        # Run buildozer with error capture and output logging
        set +e  # Don't exit on error immediately
        echo "Executing: buildozer android debug"
        echo "Command start time: $(date)"

        # Run buildozer with verbose output
        buildozer android debug --verbose 2>&1 | tee /tmp/buildozer_output.log
        BUILD_EXIT_CODE=$?

        echo "Command end time: $(date)"
        echo "Buildozer exit code: $BUILD_EXIT_CODE"
        set -e  # Re-enable exit on error

        # Always perform comprehensive APK detection regardless of exit code
        echo "=== Comprehensive APK Detection ==="
        echo "Buildozer exit code was: $BUILD_EXIT_CODE"
        echo "Searching for generated APK files..."

        # First, show the complete directory structure for debugging
        echo "=== Complete Build Directory Structure ==="
        echo "Current directory contents:"
        ls -la .
        echo ""
        echo "Buildozer directory structure:"
        find .buildozer -type d -name "*build*" 2>/dev/null | head -10
        echo ""
        echo "Looking for any APK files in entire project:"
        find . -name "*.apk" -type f 2>/dev/null | head -20
        echo ""

        # Check common APK locations with more detailed output
        APK_LOCATIONS=(
          "bin/*.apk"
          ".buildozer/android/platform/build-*/bin/*.apk"
          ".buildozer/android/platform/build-*/dist/*.apk"
          ".buildozer/android/platform/build-*/outputs/apk/debug/*.apk"
          ".buildozer/android/platform/build-*/outputs/apk/*/*.apk"
          ".buildozer/android/platform/build-*/gradle/*/outputs/apk/debug/*.apk"
          "dist/*.apk"
          "*.apk"
        )

        APK_FOUND=false
        APK_FILES=()

        for location in "${APK_LOCATIONS[@]}"; do
          echo "Checking location: $location"
          if ls $location 1> /dev/null 2>&1; then
            echo "✅ Found APK files at: $location"
            ls -la $location
            for apk in $location; do
              if [ -f "$apk" ]; then
                APK_FILES+=("$apk")
                APK_FOUND=true
                echo "  Added to collection: $apk"
              fi
            done
          else
            echo "❌ No APK files found at: $location"
          fi
        done

        # Comprehensive search with detailed output
        echo "=== Comprehensive APK Search ==="
        ALL_APKS=$(find . -name "*.apk" -type f 2>/dev/null)
        if [ -n "$ALL_APKS" ]; then
          echo "✅ Found APK files in the project:"
          echo "$ALL_APKS" | while read apk; do
            if [ -f "$apk" ]; then
              echo "  📱 $apk ($(ls -lh "$apk" | awk '{print $5}'))"
              APK_FILES+=("$apk")
              APK_FOUND=true
            fi
          done
        else
          echo "❌ No APK files found anywhere in the project"
        fi

        # Show what we found
        echo "=== APK Detection Summary ==="
        echo "APK_FOUND: $APK_FOUND"
        echo "Number of APK files found: ${#APK_FILES[@]}"
        if [ ${#APK_FILES[@]} -gt 0 ]; then
          echo "APK files list:"
          printf '%s\n' "${APK_FILES[@]}"
        fi

        # Analyze build results
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Buildozer failed with exit code: $BUILD_EXIT_CODE"
          ANALYSIS_NEEDED=true
        elif [ "$APK_FOUND" = false ]; then
          echo "❌ Buildozer completed but no APK was generated"
          ANALYSIS_NEEDED=true
        else
          echo "✅ Buildozer completed successfully and APK files were generated!"
          ANALYSIS_NEEDED=false
        fi

        # Perform detailed error analysis if needed
        if [ "$ANALYSIS_NEEDED" = true ]; then
          echo "=== Detailed Build Analysis ==="

          # Show the last part of buildozer output for immediate context
          echo "=== Last 50 lines of buildozer output ==="
          tail -50 /tmp/buildozer_output.log 2>/dev/null || echo "No buildozer output log found"

          # Check for python-for-android logs
          echo "=== Python-for-android logs ==="
          P4A_LOG_DIR=".buildozer/android/platform/python-for-android"
          if [ -d "$P4A_LOG_DIR" ]; then
            echo "Available log files:"
            find "$P4A_LOG_DIR" -name "*.log" -type f | head -10

            # Check the main build log
            if [ -f "$P4A_LOG_DIR/dist/pushup_counter/build.log" ]; then
              echo "Python-for-android build log (last 100 lines):"
              tail -100 "$P4A_LOG_DIR/dist/pushup_counter/build.log"
            fi

            # Check for any error logs
            find "$P4A_LOG_DIR" -name "*error*.log" -type f | head -3 | while read errorlog; do
              echo "Error log: $errorlog"
              cat "$errorlog"
            done
          fi

          # Check for gradle build logs
          echo "=== Gradle Build Logs ==="
          find .buildozer -name "gradle*.log" -type f | head -3 | while read gradlelog; do
            echo "Gradle log: $gradlelog (last 50 lines)"
            tail -50 "$gradlelog"
          done

          # Check for specific error patterns
          echo "=== Error Pattern Analysis ==="
          if [ -f "/tmp/buildozer_output.log" ]; then
            echo "Searching for common error patterns in buildozer output..."
            grep -n -i "error\|failed\|exception\|traceback" /tmp/buildozer_output.log | tail -20
          fi

          # If buildozer succeeded but no APK, this is a silent failure
          if [ $BUILD_EXIT_CODE -eq 0 ] && [ "$APK_FOUND" = false ]; then
            echo "🔍 SILENT FAILURE DETECTED: Buildozer reported success but no APK generated"
            echo "This usually indicates a problem in the final APK packaging stage"
          fi

          # Exit with error if no APK was generated
          if [ "$APK_FOUND" = false ]; then
            exit 1
          fi
        fi
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_HOME: ${{ env.NDK_25_PATH }}
        ANDROID_NDK_ROOT: ${{ env.NDK_25_PATH }}
        ANDROID_NDK: ${{ env.NDK_25_PATH }}
        ANDROIDNDK: ${{ env.NDK_25_PATH }}
        NDK_ROOT: ${{ env.NDK_25_PATH }}
        NDK_25_PATH: ${{ env.NDK_25_PATH }}
        ACLOCAL_PATH: ${{ env.ACLOCAL_PATH }}
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        OPENSSL_ROOT_DIR: /usr
        OPENSSL_INCLUDE_DIR: /usr/include/openssl
        OPENSSL_CRYPTO_LIBRARY: /usr/lib/x86_64-linux-gnu/libcrypto.so
        OPENSSL_SSL_LIBRARY: /usr/lib/x86_64-linux-gnu/libssl.so
        OPENSSL_LIBRARIES: /usr/lib/x86_64-linux-gnu
        SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
        SSL_CERT_DIR: /etc/ssl/certs
        LIBTOOL: /usr/local/bin/libtool
        LIBTOOLIZE: /usr/local/bin/libtoolize
        HOME: /home/runner
        BUILDOZER_HOME: /home/runner/.buildozer

    - name: Collect APK artifacts
      if: always()  # Run even if previous steps failed
      run: |
        # Create a directory for APK collection
        mkdir -p apk_output

        echo "=== APK Collection Process ==="
        echo "Collecting all APK files found during build..."

        # Search comprehensively for APK files
        echo "Searching for APK files..."
        APK_SEARCH_RESULTS=$(find . -name "*.apk" -type f 2>/dev/null || true)

        APK_COUNT=0
        if [ -n "$APK_SEARCH_RESULTS" ]; then
          echo "Found APK files:"
          while IFS= read -r apk_file; do
            if [ -f "$apk_file" ]; then
              echo "  📱 $apk_file ($(ls -lh "$apk_file" | awk '{print $5}'))"
              # Copy with original filename
              cp "$apk_file" "apk_output/"
              APK_COUNT=$((APK_COUNT + 1))
            fi
          done <<< "$APK_SEARCH_RESULTS"

          # Also copy to a predictable filename
          FIRST_APK=$(echo "$APK_SEARCH_RESULTS" | head -1)
          if [ -f "$FIRST_APK" ]; then
            cp "$FIRST_APK" "apk_output/pushup_counter_latest.apk"
            echo "✅ Main APK copied as: pushup_counter_latest.apk"
          fi

          echo "✅ Collected $APK_COUNT APK files successfully"
          ls -la apk_output/
        else
          echo "❌ No APK files found anywhere in the project"

          # Create detailed diagnostic file
          echo "Build Analysis Report" > apk_output/BUILD_ANALYSIS.txt
          echo "====================" >> apk_output/BUILD_ANALYSIS.txt
          echo "APK Generation Status: FAILED" >> apk_output/BUILD_ANALYSIS.txt
          echo "Reason: No APK files found after build completion" >> apk_output/BUILD_ANALYSIS.txt
          echo "" >> apk_output/BUILD_ANALYSIS.txt
          echo "Date: $(date)" >> apk_output/BUILD_ANALYSIS.txt
          echo "Commit: ${{ github.sha }}" >> apk_output/BUILD_ANALYSIS.txt
          echo "Branch: ${{ github.ref_name }}" >> apk_output/BUILD_ANALYSIS.txt
          echo "" >> apk_output/BUILD_ANALYSIS.txt
          echo "Potential APK Locations Checked:" >> apk_output/BUILD_ANALYSIS.txt
          echo "- bin/*.apk" >> apk_output/BUILD_ANALYSIS.txt
          echo "- .buildozer/android/platform/build-*/bin/*.apk" >> apk_output/BUILD_ANALYSIS.txt
          echo "- .buildozer/android/platform/build-*/dist/*.apk" >> apk_output/BUILD_ANALYSIS.txt
          echo "- .buildozer/android/platform/build-*/outputs/apk/debug/*.apk" >> apk_output/BUILD_ANALYSIS.txt
          echo "- dist/*.apk" >> apk_output/BUILD_ANALYSIS.txt
          echo "" >> apk_output/BUILD_ANALYSIS.txt
          echo "Build Directory Structure:" >> apk_output/BUILD_ANALYSIS.txt
          find .buildozer -type d -name "*build*" 2>/dev/null | head -10 >> apk_output/BUILD_ANALYSIS.txt || echo "No build directories found" >> apk_output/BUILD_ANALYSIS.txt
          echo "" >> apk_output/BUILD_ANALYSIS.txt
          echo "Last 20 lines of buildozer output:" >> apk_output/BUILD_ANALYSIS.txt
          tail -20 /tmp/buildozer_output.log 2>/dev/null >> apk_output/BUILD_ANALYSIS.txt || echo "No buildozer output available" >> apk_output/BUILD_ANALYSIS.txt
          echo "" >> apk_output/BUILD_ANALYSIS.txt
          echo "Recommendation: Check build-logs-and-diagnostics artifact for detailed error analysis." >> apk_output/BUILD_ANALYSIS.txt

          echo "No APK files were generated during this build" > apk_output/NO_APK_GENERATED.txt
        fi

        # Always show what we're uploading
        echo "=== Final APK Output Directory ==="
        ls -la apk_output/

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: pushup-counter-debug-apk
        path: apk_output/
        retention-days: 30
        if-no-files-found: warn

    - name: Collect build logs and diagnostics
      if: always()  # Run even if build succeeds, for debugging
      run: |
        # Create logs directory
        mkdir -p build_logs

        # Collect buildozer output
        if [ -f "/tmp/buildozer_output.log" ]; then
          cp "/tmp/buildozer_output.log" build_logs/
        fi

        # Collect python-for-android logs
        if [ -d ".buildozer/android/platform/python-for-android" ]; then
          find .buildozer/android/platform/python-for-android -name "*.log" -type f | while read logfile; do
            # Create relative path for log file
            rel_path=$(echo "$logfile" | sed 's|.buildozer/android/platform/python-for-android/||')
            mkdir -p "build_logs/p4a/$(dirname "$rel_path")"
            cp "$logfile" "build_logs/p4a/$rel_path"
          done
        fi

        # Collect buildozer logs
        if [ -d ".buildozer" ]; then
          find .buildozer -name "*.log" -type f | head -20 | while read logfile; do
            rel_path=$(echo "$logfile" | sed 's|.buildozer/||')
            mkdir -p "build_logs/buildozer/$(dirname "$rel_path")"
            cp "$logfile" "build_logs/buildozer/$rel_path"
          done
        fi

        # Create a summary file
        echo "Build Summary - $(date)" > build_logs/build_summary.txt
        echo "================================" >> build_logs/build_summary.txt
        echo "Build Status: ${{ job.status }}" >> build_logs/build_summary.txt
        echo "Commit: ${{ github.sha }}" >> build_logs/build_summary.txt
        echo "Branch: ${{ github.ref_name }}" >> build_logs/build_summary.txt
        echo "" >> build_logs/build_summary.txt

        # Add environment info
        echo "NDK Environment Variables:" >> build_logs/build_summary.txt
        env | grep -i ndk | sort >> build_logs/build_summary.txt

        echo "Collected logs:"
        find build_logs -type f | sort

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-and-diagnostics
        path: build_logs/
        retention-days: 7
